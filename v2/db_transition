#!/bin/bash

retval=0
isforced=0

ErrorOut() {
    retval=1
    echo "ERROR: .... stuff"
    echo "   $*"
    DisplayOptions $0
}

DisplayOptions() {
    echo ""
    echo "Usage: "`basename $0`" [-f]"
    echo "---------------------------------------------------------------------"
    echo "  Creates a new database version from the old one. Assumes DBVER -1."
    echo "  Or, if ver1, just creates it."
    echo ""
    echo "    -f/--force - force 'yes' response to continue"
    echo "     -h/--help - this help message"
    echo "    --env X    - set environment, ex. 'dev','live','test'"
    echo "    --sys X    - set system to use, ex. 'LCOM','SERVER','CCOM'"
    echo "    --ver X    - change default version number, i.e. '1' if system is set to '3'"
    echo ""
    exit $retval
}




# Load settings
cwd=`pwd`"/."
p=`dirname $cwd`
#source $p/_dbsettings
#source $p/config.conf
#source /usr/local/bin/db_config.conf
#if [ $? != 0 ]; then
#	echo "ERROR: no _dbsettings.tcsh file. Are you calling from the wrong directory?"
#	exit 1
#fi

sys=""
env=""
lsid=""
ver=""

while [ "`echo $1 | cut -c 1`" == "-" ]; do
    if [ "$1" == "-h" -o "$1" == "--help" ]; then
        DisplayOptions $*
    elif [ "$1" == "-f" -o "$1" == "--force" ]; then
        isforced=1
    elif [ "$1" == "--env" ]; then
        shift
        env="--env $1"
    elif [ "$1" == "-s" -o "$1" == "--sys" ]; then
        shift
        sys="--sys $1"
    elif [ "$1" == "--lsid" ]; then
        shift
        lsid="--lsid $1"
    elif [ "$1" == "--ver" ]; then
        shift
        ver="--ver $1"
    else
        echo "ERROR: unknown argument '$1'"
        ErrorOut
    fi
    shift
done

. db_config $sys $env $lsid $ver --

# Defines
LS="$p/.rebuild.sql"
LSOUT="$p/.rebuild.out"
#echo "LS: $LS"
OLDDBVER=`php -r "echo $DB_CONFIG_VER-1;";`

if [ "$DB_CONFIG_SYS" == "LCOM" ] ; then
    OLDDBNAME=$(ComputeLDBName $DB_CONFIG_APPNAME $DB_CONFIG_SYS $DB_CONFIG_ENVIRONMENT $OLDDBVER $DB_CONFIG_LSID)
else
    OLDDBNAME=$(ComputeDBName $DB_CONFIG_APPNAME $DB_CONFIG_SYS $DB_CONFIG_ENVIRONMENT $OLDDBVER)
fi
#echo "OLDDBNAME $OLDDBNAME $DB_CONFIG_APPNAME $DB_CONFIG_SYS $DB_CONFIG_ENVIRONMENT $OLDDBVER"
#OLDDBVER=`php -r "echo $DB_CONFIG_VER-1;";`
#OLDDBNAME=$(ComputeDBName $APPNAME $DB_CONFIG_ENVIRONMENT $OLDDBVER)
#echo "OLDDBNAME $OLDDBNAME $APPNAME $DB_CONFIG_ENVIRONMENT $OLDDBVER"

echo ""
echo " Settings..."
echo "---------------------------------------------------------------------"
#echo "   state : $INSTRAPPTION"
echo "     DBVER : $DB_CONFIG_VER"
echo "    DBNAME : $DB_CONFIG_DBNAME"
if [ "$DB_CONFIG_VER" != "1" ]; then
	echo "  OLDDBVER : $OLDDBVER"
	echo " OLDDBNAME : $OLDDBNAME"
fi


echo ""
echo ""
echo "Run pretests"
echo "---------------------------------------------------------------------"
if [ -f $DB_CONFIG_DBDIR/pretest.tcsh ]; then
	source $DB_CONFIG_DBDIR/pretest.tcsh
	if [ $? == 0 ]; then 
   		echo "   ... passed"
	else 
      exit 1
	fi
else 
	echo "  ... no pretest"
fi


# for first version, just reload it, nothing to transition
if [ $DB_CONFIG_VER == 1 ]; then
	echo ""
	echo ""
	echo "CONFIRM: Continuing will rebuild database."
	echo "---------------------------------------------------------------------"
	echo -n "REBUILD DATABASE [y/N] > "
	if [ "$isforced" == "1" ]; then 
		isready="Y"
	else
    read isready
	fi
    echo $isready
	if ! [ "$isready" == "Y" -o "$isready" == "y" ] ; then
		echo ""
		echo "... EXITING"
		echo ""
		exit 1
	fi
else 
	echo ""
	echo ""
	echo "CONFIRM: Continuing will delete and rebuild InstrApption database."
	echo "---------------------------------------------------------------------"
	echo "    existing $DB_CONFIG_DBNAME --> delete"
	echo "             $OLDDBNAME --> $DB_CONFIG_DBNAME "
	echo "---------------------------------------------------------------------"
	echo -n "DELETE AND BUILD DATABASE [y/N] > "
	if [ $isforced == 1 ]; then 
		isready='Y'
	else
        read isready
	fi
    echo $isready
	if ! [ "$isready" == "Y" -o "$isready" == "y" ] ; then
		echo ""
		echo "... EXITING"
		echo ""
		exit 1
	fi



	echo ""
	echo ""
	echo "Save $OLDDBNAME to file."
	echo "---------------------------------------------------------------------"
    echo " db_saveall -q $DB_CONFIG_ENVIRONMENT $OLDDBVER"
	db_saveall  $DB_CONFIG_ENVIRONMENT $OLDDBVER
	if [ $? != 0 ]; then
		echo " : failed. trying to fix."
		echo ""

        # ensure that the database exists! i.e. on first call to a new version
        mysql --defaults-file=$DB_CONFIG_MYSQLMY -e "CREATE DATABASE IF NOT EXISTS $DB_CONFIG_DBNAME;"
        echo $?
        db_access --ver $DB_CONFIG_VER $sys
        if [ "$?" != "0" ]; then
            echo "...failed to correct"
            exit 1
        else
            echo "corrected. retrying "
        fi
        db_saveall  $DB_CONFIG_ENVIRONMENT $OLDDBVER
        if [ $? != 0 ]; then
            echo " : failed again. bummer."
            exit 1
        fi
	fi
	#latestdump=`ls -tra $p/dumps/dump_20[0-9][0-9]_*.sql | tail -n 1`
    #latestdump=`ls -tra $DB_CONFIG_DBDIR/dumps/dump_20[0-9][0-9]_*.sql | tail -n 1`
    latestdump=$(<.lastdb_saveall)
	echo "    : success, using dump file: $latestdump"
	echo ""


fi

echo ""
echo ""
echo "Build new db"
echo "---------------------------------------------------------------------"
echo "" > $LS
echo "drop database if exists $DB_CONFIG_DBNAME;" >> $LS
echo "create database $DB_CONFIG_DBNAME;" >> $LS 
#echo "grant all privileges on $DB_CONFIG_DBNAME.* to $APPNAME@localhost;" >> $LS 
#mysql -u root -p < $LS
mysql --defaults-file=$DB_CONFIG_MYSQLMY < $LS
if [ "$?" != "0" ]; then
	echo ""
	echo ""
	echo "FAILED building database... wrong password? ...no user? ...no user privileges?"
    echo ""
    echo " ... To resolve no user issue:"
    echo "    Run this as root: (mysql -u root -p)"
    echo "  CREATE USER IF NOT EXISTS \`$DB_CONFIG_USER\`@'localhost' IDENTIFIED BY '***';"
    echo "     NOTE: The '***' is the user's password in .my.cnf file"
    echo ""
    echo " ...Or, if this is the first time to run for this version, the user needs privileges to the database."
    echo "    Run this as root: (mysql -u root -p)"
	echo "   grant all privileges on \`"$DB_CONFIG_DBNAME"\`.* to \`$DB_CONFIG_USER\`@\`localhost\`;"
	echo ""

    echo -n "Attempt to resolve (NOTE: will require root database access)? (y/N) "
	if [ "$isforced" == "1" ]; then 
		isready="Y"
    fi
    read isready
    echo $isready
	if ! [ "$isready" == "Y" -o "$isready" == "y" ] ; then
        echo "... exiting"
        exit 1
    fi

    db_access $sys $env $lsid $ver

    if [ "$?" != "0" ]; then
        exit 1
    else
        echo ""
        echo "... created user and granted privileges, trying to build database again..."
        echo ""
    fi
    mysql --defaults-file=$DB_CONFIG_MYSQLMY < $LS
    if [ "$?" != "0" ]; then
        echo ""
        echo "ERROR: Failed. Bummer."
        echo " ...This is beyond my abilities as a bash script to correct."
        echo ""
        exit 1
    else
        echo "SUCCESS! Seems to work, continuing..."
    fi

fi




echo ""
echo "Build import script ($LS)"
echo "---------------------------------------------------------------------"
echo "" > $LS
echo "use $DB_CONFIG_DBNAME;" >> $LS
if [ "$DB_CONFIG_VER" != "1" ]; then
   	echo "source $latestdump;" >> $LS
fi
if [ ! -f "$DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS.sql" ]; then
	echo "ERROR: No $DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS.sql file"
	exit 1
fi
echo "source ./load_$DB_CONFIG_SYS.sql;" >> $LS

echo " ...looking for file for environment '$DB_CONFIG_ENVIRONMENT' : $DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS""_""$DB_CONFIG_ENVIRONMENT.sql."
if [ -f "$DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS""_""$DB_CONFIG_ENVIRONMENT.sql" ]; then 
    echo " ...found load file for environment '$DB_CONFIG_ENVIRONMENT' : $DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS""_""$DB_CONFIG_ENVIRONMENT.sql."
    echo "source $DB_CONFIG_DBDIR/load_$DB_CONFIG_SYS""_""$DB_CONFIG_ENVIRONMENT.sql;" >> $LS
fi

#if [ ! -f $p/ver$DB_CONFIG_VER/load.sql ]; then
#	echo "ERROR: No $p/ver$DB_CONFIG_VER/load.sql file"
#	exit 1
#fi
#echo "source $p/ver$DB_CONFIG_VER/load.sql;" >> $LS
#if [ -f $p/ver$DB_CONFIG_VER/load_$DB_CONFIG_ENVIRONMENT.sql ]; then
#    echo " ...found load file for $DB_CONFIG_ENVIRONMENT."
#    echo "source $p/ver$DB_CONFIG_VER/load_$DB_CONFIG_ENVIRONMENT.sql;" >> $LS
#fi
echo " ...done"

echo ""
echo "Run import script"
echo "---------------------------------------------------------------------"
#echo " here, cd first to directory DB_CONFIG_DBDIR and then fix the .rebuild.sql file to not cd"
#echo "  :: $p/$DB_CONFIG_DBDIR :: $LS"
#cd $DB_CONFIG_DBDIR ; mysql --defaults-file=$DB_CONFIG_MYSQLMY < $LS
cd $DB_CONFIG_DBDIR 
mysql --defaults-file=$DB_CONFIG_MYSQLMY < $LS > $LSOUT 2>&1
RESULTIS=`cat $LSOUT`
if [ "$RESULTIS" == "" ]; then
	echo " ...SUCCESS!"
	echo 
	echo " ... successfully created database $DB_CONFIG_DBNAME"
	echo 
else
    echo
    echo $RESULTIS
    echo
	echo "ERROR: failed importing the scripts in $DB_CONFIG_DBDIR"
	exit 1
fi

#rm $LS
#rm $LSOUT

exit $retval


